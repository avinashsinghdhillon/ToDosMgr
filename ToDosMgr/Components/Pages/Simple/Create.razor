@page "/simple/create"
@using Microsoft.EntityFrameworkCore
@using ToDosMgr
@inject IDbContextFactory<ToDosMgr.Data.ToDosMgrContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>ToDoItem</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="ToDoItem" OnValidSubmit="AddToDoItem" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="itemname" class="form-label">To Do:</label> 
                <InputText id="itemname" @bind-Value="ToDoItem.ItemName" class="form-control" aria-required="true"/> 
                <ValidationMessage For="() => ToDoItem.ItemName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="done" class="form-label">Done:</label> 
                <InputCheckbox id="done" @bind-Value="ToDoItem.Done" class="form-check-input" /> 
                <ValidationMessage For="() => ToDoItem.Done" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/simple">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private ToDoItem ToDoItem { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddToDoItem()
    {
        using var context = DbFactory.CreateDbContext();
        context.ToDoItem.Add(ToDoItem);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/simple");
    }
}
