@page "/simple/delete"
@using Microsoft.EntityFrameworkCore
@using ToDosMgr
@inject IDbContextFactory<ToDosMgr.Data.ToDosMgrContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>ToDoItem</h2>
    <hr />
    @if (todoitem is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">To Do</dt>
            <dd class="col-sm-10 @deleteAnimation">@todoitem.ItemName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Done</dt>
            <dd class="col-sm-10">@todoitem.Done</dd>
        </dl>
        <EditForm method="post" Model="todoitem" OnValidSubmit="DeleteToDoItem" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(todoitem is null)">Delete</button> |
            <a href="/simple">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private ToDoItem? todoitem;
    private string deleteAnimation = "";

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        todoitem = await context.ToDoItem.FirstOrDefaultAsync(m => m.Id == Id);

        if (todoitem is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteToDoItem()
    {
        //imitate an async operation delay
        await Task.Delay(2000);
        Animate(true);

        using var context = DbFactory.CreateDbContext();
        context.ToDoItem.Remove(todoitem!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/simple");
    }

    private void Animate(bool deleting)
    {
        //animate to show deletion via css isolation
        deleteAnimation = "animateCell";
    }
}
