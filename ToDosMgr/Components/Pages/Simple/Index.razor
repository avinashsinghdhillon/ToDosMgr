@page "/"
@page "/simple"
@rendermode InteractiveServer

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using ToDosMgr
@using ToDosMgr.Data
@implements IAsyncDisposable
@inject IDbContextFactory<ToDosMgr.Data.ToDosMgrContext> DbFactory

<PageTitle>Simple</PageTitle>


<h1>Basic List Manager</h1>

<h3>This is a simple and non-persistent To-Do Manager</h3>

<p>
    <a href="simple/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.ToDoItem">
    <PropertyColumn Property="todoitem => todoitem.ItemName" Title="To Do" />
    <PropertyColumn Property="todoitem => todoitem.Done" Title="Done" />
    <div>
        <label class="radioLables"> 
            All
            <input checked="true" type="radio" name="filter" title="All" @onchange="clearfilter" @onclick="updateFilterLabel" hidden="true">
        </label>

        <label class="radioLables">
            Done
            <input type="radio" name="filter" title="Done" @onchange="onchangetrue" @onclick="updateFilterLabel" hidden="true">
        </label>

        <label class="radioLables">
            Pending
            <input type="radio" name="filter" title="Pending" @onchange="onchangefalse" @onclick="updateFilterLabel" hidden="true">
        </label>
        <label class="filterName">
            Filter By: @filterSelected
        </label>
    </div>
    <TemplateColumn Context="todoitem">
        <a href="@($"simple/edit?id={todoitem.Id}")">Edit</a> |
        <a href="@($"simple/details?id={todoitem.Id}")">Details</a> |
        <a href="@($"simple/delete?id={todoitem.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>


@code {
    private ToDosMgrContext context = default!;
    private ToDoItem filteredItems = new ToDoItem();
    private string? filterSelected = "All";



    protected override void OnInitialized() => context = DbFactory.CreateDbContext();

    public async ValueTask DisposeAsync() => await context.DisposeAsync();

    // this is not working as intended
    private void clearfilter() => filteredItems = (ToDoItem)context.ToDoItem.Where(s => s.Done.Equals(true || false));
    private void onchangetrue() => filteredItems = (ToDoItem)context.ToDoItem.Where(s => s.Done.Equals(true));
    private void onchangefalse() => filteredItems = (ToDoItem)context.ToDoItem.Where(s => s.Done.Equals(false));

    private void updateFilterLabel(MouseEventArgs e)
    {
        filterSelected = e.ToString(); //unsure on how to get the value of the radio button or the label.
    }
}
